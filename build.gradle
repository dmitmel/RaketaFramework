plugins {
    id 'cz.malohlava' version '1.0.0'      // Plugin for tasks-graph building
}


// Configuring tasks-graph builder plugin
visteg {
    enabled        = true
    colouredNodes  = true
    colouredEdges  = true
    destination    = 'build/reports/tasks-graph.dot'
    exporter       = 'dot'
    colorscheme    = 'spectral11'
    nodeShape      = 'box'
    startNodeShape = 'hexagon'
    endNodeShape   = 'doubleoctagon'
}


project.ext {
    gmtDateFormat = new java.text.SimpleDateFormat('EEE, MMM d, yyyy HH:mm:ss a z')
    buildDateString = gmtDateFormat.format(new Date())
    
    junitVersion = '4.12'
    gradleVersion = '2.14.1'
}


task wrapper(type: Wrapper) {
    gradleVersion = gradleVersion
}

// Function requires Markdown compiler from my GitHub repo 'https://github.com/dmitmel/common-mark-gen'
void compileMarkdownFile(File inputFile) {
    def userHome = System.getProperty('user.home')
    def documentStyle = "file://$userHome/.common-mark-gen/github-markdown.css"
    def codeStyle = "file://${userHome}/node_modules/highlight.js/styles/github.css"
    def compilerExecutable = "${userHome}/.common-mark-gen/common-mark-gen"

    exec {
        workingDir     = projectDir
        executable     = compilerExecutable
        args           = ['--code-style', codeStyle, '--doc-style', documentStyle, '-1', inputFile.getName()]
        standardOutput = System.out
        errorOutput    = System.err
    }
}

task compileMarkdown(description: 'Generate HTML versions of Markdown files') {
    doFirst {
        fileTree(dir: './', include: '*.md').each { compileMarkdownFile(it) }
    }
}

task cleanCompiledMarkdown(description: 'Clean HTML versions of Markdown files') {
    doFirst {
        fileTree(dir: './', include: '*.md.html').each { project.delete(it) }
    }
}


allprojects {
    // Root project is being initialized before sub projects, so I'm using function 'afterEvaluate' to setup tasks
    afterEvaluate {
        // Setting group and versions
        group = 'org.willthisfly.raketa-framework'
        version = file("$rootDir/.version").text.trim()
    }
}


subprojects {
    if ('subprojects' != name) {
        // Root project is being initialized before sub projects, so I'm using function 'afterEvaluate'
        afterEvaluate {
            if ('core' != name) {
                assemble.dependsOn(project(':core').assemble)
                classes.dependsOn(project(':core').classes)
                testClasses.dependsOn(project(':core').testClasses)
            }
    
            // Modifying output resource paths
            sourceSets {
                main { output.resourcesDir = output.classesDir }
                test { output.resourcesDir = output.classesDir }
            }
    
            def additionalJavaCompilerOptions = ['-Xlint:unchecked']
    
            // Adding compiler options for all projects, which support compilation tasks
            if (hasProperty('compileJava'))
                compileJava.options.compilerArgs.addAll(additionalJavaCompilerOptions)
    
            if (hasProperty('compiletTesJava'))
                compileTestJava.options.compilerArgs.addAll(additionalJavaCompilerOptions)
    
            if (hasProperty('compileScala'))
                compileScala.options.compilerArgs.addAll(additionalJavaCompilerOptions)
    
            if (hasProperty('compileTestScala'))
                compileTestScala.options.compilerArgs.addAll(additionalJavaCompilerOptions)
    
            // Configuring JAR building
                jar {
                    manifest {
                        attributes(
                                'Gradle-Version'  : gradleVersion,
                                'Built-On'        : buildDateString,
                                'Artifact-Version': rootProject.version,
                                'Group-ID'        : rootProject.group,
                                'Artifact-ID'     : project.name
                        )
                    }
                    
                    appendix = project.name
                    baseName = rootProject.name
    
                    // Removing duplicate files in JARs. Somehow, 'jar' tasks uses input sources 2 times. To prevent this,
                    // I removed build location in first time
                    doFirst { sourceSets['main'].output.classesDir = null }
                    doLast  { sourceSets['main'].output.classesDir = sourceSets.main.output.classesDir }
                }
    
            // Configuring JavaDoc generating
            javadoc {
                title = null
                options.memberLevel = JavadocMemberLevel.PRIVATE
                options.author = true
                options.version = true
            }
        }
    }
}
